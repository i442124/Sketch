@inherits SKCanvasComponent
<canvas width="@Width" height="@Height"
        @onmousemove="OnMouseMove"
        @onmouseover="OnMouseOver"
        @onmousedown="OnMouseDown"
        @onmouseout="OnMouseOut"
        @onmouseup="OnMouseUp"
        @ref="_canvasRef" />

@code{

    private bool _painting;
    private int _previousX;
    private int _previousY;

    [Parameter]
    public Color Color { get; set; }

    [Parameter]
    public float Thickness { get; set; }

    private void OnMouseUp(MouseEventArgs e)
    {
        if (!IsPrimaryButtonPressed(e))
        {
            _painting = false;
        }
    }

    private void OnMouseDown(MouseEventArgs e)
    {
        if (IsPrimaryButtonPressed(e))
        {
            _painting = true;
        }
    }

    private async Task OnMouseMove(MouseEventArgs e)
    {
        var currentX = (int)e.OffsetX;
        var currentY = (int)e.OffsetY;

        var previousX = _previousX;
        var previousY = _previousY;

        _previousX = currentX;
        _previousY = currentY;

        if (_painting)
        {
            var stroke = new Stroke
            {
                Line = (previousX, previousY, currentX, currentY),
                Options = new StrokeOptions { Color = Color, Thickness = Thickness }
            };

            await SendAsync(stroke);
        }
    }

    private void OnMouseOver(MouseEventArgs e)
    {
        var currentX = (int)e.OffsetX;
        var currentY = (int)e.OffsetY;

        _previousX = currentX;
        _previousY = currentY;

        _painting = IsPrimaryButtonPressed(e);
    }

    private void OnMouseOut(MouseEventArgs e)
    {
    }

    private bool IsPrimaryButtonPressed(MouseEventArgs e)
    {
        return e.Buttons > 0 && ((e.Buttons | 1) == 1);
    }

    private bool IsSecondaryButtonPressed(MouseEventArgs e)
    {
        return e.Buttons > 0 && ((e.Buttons | 2) == 2);
    }
}